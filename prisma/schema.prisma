datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                    @id @default(cuid())
  name                    String
  email                   String                    @unique
  password                String?
  avatarUrl               String?
  phoneNumber             String?
  roleId                  String
  departmentId            String?
  districtId              String?
  branchId                String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  role                    Role                      @relation(fields: [roleId], references: [id])
  department              Department?               @relation(fields: [departmentId], references: [id])
  district                District?                 @relation(fields: [districtId], references: [id])
  branch                  Branch?                   @relation(fields: [branchId], references: [id])
  attendedSessions        UserAttendedLiveSession[]
  completedCourses        UserCompletedCourse[]
  badges                  UserBadge[]
  quizAttempts            QuizAttempt[]

  @@index([roleId])
  @@index([departmentId])
  @@index([districtId])
  @@index([branchId])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]
}

model District {
  id       String   @id @default(cuid())
  name     String   @unique
  users    User[]
  branches Branch[]
}

model Branch {
  id         String   @id @default(cuid())
  name       String
  districtId String
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  users      User[]

  @@index([districtId])
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Product {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  imageUrl    String
  imageHint   String
  courses     Course[]
}

model Course {
  id                 String                @id @default(cuid())
  title              String
  description        String
  productId          String
  imageUrl           String?
  imageDescription String?
  imageHint          String?
  product            Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  modules            Module[]
  learningPaths      LearningPathCourse[]
  quiz               Quiz?
  completedBy        UserCompletedCourse[]

  @@index([productId])
}

model Module {
  id          String @id @default(cuid())
  title       String
  description String
  type        String // "video", "pdf", "slides"
  duration    Int
  content     String
  courseId    String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model LearningPath {
  id          String               @id @default(cuid())
  title       String
  description String
  courses     LearningPathCourse[]
}

model LearningPathCourse {
  learningPathId String
  courseId       String
  order          Int
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([learningPathId, courseId])
  @@index([courseId])
}


model LiveSession {
  id              String                    @id @default(cuid())
  title           String
  description     String
  speaker         String
  keyTakeaways    String
  dateTime        DateTime
  platform        LiveSessionPlatform
  joinUrl         String
  recordingUrl    String?
  attendees       UserAttendedLiveSession[]
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

model UserAttendedLiveSession {
  userId    String
  sessionId String
  attendedAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([userId, sessionId])
  @@index([sessionId])
}

model Quiz {
  id           String        @id @default(cuid())
  courseId     String        @unique
  passingScore Int
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]
}

model Question {
  id              String       @id @default(cuid())
  text            String
  type            QuestionType
  quizId          String
  correctAnswerId String
  quiz            Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]

  @@index([quizId])
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

enum QuestionType {
  multiple_choice
  true_false
  fill_in_the_blank
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Int
  passed    Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

model Badge {
  id          String      @id @default(cuid())
  title       String
  description String
  icon        String
  users       UserBadge[]
}

model UserBadge {
  userId  String
  badgeId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
  @@index([badgeId])
}

model UserCompletedCourse {
  userId         String
  courseId       String
  completionDate DateTime @default(now())
  score          Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@index([courseId])
}

model CertificateTemplate {
  id             String  @id @default("singleton")
  title          String
  organization   String
  body           String
  signatoryName  String
  signatoryTitle String
  signatureUrl   String?
  stampUrl       String?
}

model RegistrationField {
  id        String   @id
  label     String
  enabled   Boolean  @default(false)
  required  Boolean  @default(false)
}
