
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String         @id @default(cuid())
  name            String
  email           String         @unique
  password        String
  avatarUrl       String?
  phoneNumber   String?
  activeSessionId String?        @unique
  roleId          String
  role            Role           @relation(fields: [roleId], references: [id])
  departmentId    String?
  department      Department?    @relation(fields: [departmentId], references: [id])
  districtId      String?
  district        District?      @relation(fields: [districtId], references: [id])
  branchId        String?
  branch          Branch?        @relation(fields: [branchId], references: [id])
  completedCourses UserCompletedCourse[]
  completedModules UserCompletedModule[]
  badges          UserBadge[]
  attendedSessions UserAttendedLiveSession[]
  allowedSessions LiveSessionAllowedUser[]
  loginHistory    LoginHistory[]
  notifications   Notification[]
  trainingProviderId String?
  trainingProvider  TrainingProvider? @relation(fields: [trainingProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id                String @id @default(cuid())
  name              String @unique
  users             User[]
  permissions       Json
  trainingProviderId String?
  trainingProvider  TrainingProvider? @relation(fields: [trainingProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model District {
  id        String    @id @default(cuid())
  name      String    @unique
  users     User[]
  branches  Branch[]
  trainingProviderId String
  trainingProvider  TrainingProvider @relation(fields: [trainingProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id        String    @id @default(cuid())
  name      String
  districtId String
  district  District  @relation(fields: [districtId], references: [id])
  users     User[]
  trainingProviderId String
  trainingProvider  TrainingProvider @relation(fields: [trainingProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id        String    @id @default(cuid())
  name      String
  users     User[]
  trainingProviderId String
  trainingProvider  TrainingProvider @relation(fields: [trainingProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String
  imageHint   String?
  courses     Course[]
  trainingProviderId String
  trainingProvider  TrainingProvider @relation(fields: [trainingProviderId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum CourseStatus {
  PENDING
  PUBLISHED
  ARCHIVED
}

enum Currency {
  USD
  ETB
}

model Course {
  id              String      @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  imageHint       String?
  imageDescription String?
  productId       String?
  product         Product?    @relation(fields: [productId], references: [id])
  modules         Module[]
  quiz            Quiz?
  completedBy     UserCompletedCourse[]
  learningPaths   LearningPathCourse[]
  isPaid          Boolean     @default(false)
  price           Float?
  currency        Currency?
  hasCertificate  Boolean     @default(false)
  status          CourseStatus @default(PENDING)
  trainingProviderId String
  trainingProvider  TrainingProvider @relation(fields: [trainingProviderId], references: [id])
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model UserCompletedCourse {
  userId         String
  courseId       String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completionDate DateTime @default(now())
  score          Int

  @@id([userId, courseId])
}

enum ModuleType {
  video
  pdf
  slides
  audio
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  type        ModuleType
  duration    Int
  content     String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedBy UserCompletedModule[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserCompletedModule {
  userId   String
  moduleId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId])
}

model Badge {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]
}

model UserBadge {
  userId  String
  badgeId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  
  @@id([userId, badgeId])
}


enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
}

enum QuizType {
  OPEN_LOOP
  CLOSED_LOOP
}

model Quiz {
  id          String   @id @default(cuid())
  courseId    String   @unique
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   Question[]
  passingScore Int
  timeLimit   Int // in minutes
  quizType    QuizType
  requiresManualGrading Boolean @default(false)
  submissions QuizSubmission[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id              String   @id @default(cuid())
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text            String
  type            QuestionType
  options         Option[]
  correctAnswerId String
  weight          Float
  answers         Answer[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LearningPath {
  id              String      @id @default(cuid())
  title           String
  description     String
  courses         LearningPathCourse[]
  hasCertificate  Boolean     @default(false)
  trainingProviderId String
  trainingProvider  TrainingProvider @relation(fields: [trainingProviderId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningPathCourse {
  learningPathId  String
  learningPath    LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order           Int

  @@id([learningPathId, courseId])
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

model LiveSession {
  id            String      @id @default(cuid())
  title         String
  description   String
  speaker       String
  keyTakeaways  String
  dateTime      DateTime
  platform      LiveSessionPlatform
  joinUrl       String
  recordingUrl  String?
  attendedBy    UserAttendedLiveSession[]
  isRestricted  Boolean     @default(false)
  allowedAttendees LiveSessionAllowedUser[]
  trainingProviderId String
  trainingProvider  TrainingProvider @relation(fields: [trainingProviderId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model UserAttendedLiveSession {
  userId    String
  sessionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  attendedAt DateTime @default(now())

  @@id([userId, sessionId])
}

model LiveSessionAllowedUser {
  userId    String
  sessionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@id([userId, sessionId])
}

model CertificateTemplate {
  id              String    @id @default(cuid())
  title           String
  organization    String
  body            String
  signatoryName   String
  signatoryTitle  String
  signatureUrl    String?
  stampUrl        String?
  trainingProviderId String @unique
  trainingProvider TrainingProvider @relation(fields: [trainingProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum FieldType {
  TEXT
  NUMBER
  DATE
  SELECT
}

model RegistrationField {
  id                String @id @default(cuid())
  label             String
  type              FieldType
  options           String[]
  enabled           Boolean @default(false)
  required          Boolean @default(false)
  isLoginIdentifier Boolean @default(false)
  trainingProviderId String?
  trainingProvider  TrainingProvider? @relation(fields: [trainingProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum QuizSubmissionStatus {
  IN_PROGRESS
  PENDING_REVIEW
  COMPLETED
}

model QuizSubmission {
  id          String @id @default(cuid())
  userId      String
  user        User @relation(fields: [userId], references: [id])
  quizId      String
  quiz        Quiz @relation(fields: [quizId], references: [id])
  answers     Answer[]
  score       Int?
  status      QuizSubmissionStatus @default(IN_PROGRESS)
  submittedAt DateTime @default(now())
  gradedAt    DateTime?
}

model Answer {
  id               String @id @default(cuid())
  submissionId     String
  submission       QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String?
  answerText       String?
}

model LoginHistory {
  id          String @id @default(cuid())
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
}

model Notification {
  id            String @id @default(cuid())
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  title         String
  description   String
  isRead        Boolean @default(false)
  
  createdAt     DateTime @default(now())
}

model TrainingProvider {
  id                String @id @default(cuid())
  name              String @unique
  address           String
  accountNumber     String @unique
  users             User[]
  roles             Role[]
  districts         District[]
  branches          Branch[]
  departments       Department[]
  products          Product[]
  courses           Course[]
  learningPaths     LearningPath[]
  liveSessions      LiveSession[]
  certificateTemplate CertificateTemplate?
  registrationFields RegistrationField[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
