// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TrainingProvider {
  id               String   @id @default(cuid())
  name             String   @unique
  address          String
  accountNumber    String   @unique
  adminFirstName   String
  adminLastName    String
  adminEmail       String   @unique
  adminPhoneNumber String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model User {
  id                    String                    @id @default(cuid())
  name                  String
  email                 String                    @unique
  password              String
  avatarUrl             String?
  roleId                String
  departmentId          String?
  districtId            String?
  branchId              String?
  phoneNumber           String?
  activeSessionId       String?                   @unique
  role                  Role                      @relation(fields: [roleId], references: [id])
  department            Department?               @relation(fields: [departmentId], references: [id])
  district              District?                 @relation(fields: [districtId], references: [id])
  branch                Branch?                   @relation(fields: [branchId], references: [id])
  completedModules      UserCompletedModule[]
  completedCourses      UserCompletedCourse[]
  badges                UserBadge[]
  quizSubmissions       QuizSubmission[]
  liveSessionsAttended  UserAttendedLiveSession[]
  liveSessionsAllowed   LiveSessionAllowedUser[]
  notifications         Notification[]
  loginHistory          LoginHistory[]
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]
}

model Department {
  id    String   @id @default(cuid())
  name  String   @unique
  users User[]
}

model District {
  id       String   @id @default(cuid())
  name     String   @unique
  users    User[]
  branches Branch[]
}

model Branch {
  id         String   @id @default(cuid())
  name       String
  districtId String
  district   District @relation(fields: [districtId], references: [id])
  users      User[]

  @@unique([name, districtId])
}

model Product {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  imageUrl     String
  imageHint    String?
  courses      Course[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Course {
  id                 String                @id @default(cuid())
  title              String
  description        String
  imageUrl           String?
  imageDescription   String?
  imageHint          String?
  isPaid             Boolean               @default(false)
  price              Float?
  currency           Currency?
  hasCertificate     Boolean               @default(false)
  productId          String?
  product            Product?              @relation(fields: [productId], references: [id])
  modules            Module[]
  learningPath       LearningPathCourse[]
  completedBy        UserCompletedCourse[]
  quiz               Quiz?
  status             String                @default("PENDING")
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
}

model Module {
  id                 String                @id @default(cuid())
  courseId           String
  course             Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title              String
  type               ModuleType
  duration           Int
  description        String
  content            String
  completedBy        UserCompletedModule[]
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
}

model UserCompletedModule {
  userId     String
  moduleId   String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module     Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@id([userId, moduleId])
}

model UserCompletedCourse {
  userId         String
  courseId       String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completionDate DateTime @default(now())
  score          Int

  @@id([userId, courseId])
}

model Quiz {
  id                    String           @id @default(cuid())
  courseId              String           @unique
  course                Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  passingScore          Int
  timeLimit             Int
  quizType              QuizType
  requiresManualGrading Boolean          @default(false)
  questions             Question[]
  submissions           QuizSubmission[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
}

model Question {
  id              String         @id @default(cuid())
  quizId          String
  quiz            Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text            String
  type            QuestionType
  options         Option[]
  correctAnswerId String?
  weight          Float          @default(1)
  answers         Answer[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Option {
  id         String     @id @default(cuid())
  questionId String
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  answers    Answer[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model QuizSubmission {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Int?
  status    SubmissionStatus
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   Answer[]
  submittedAt DateTime @default(now())
  gradedAt  DateTime?
}

model Answer {
  id               String          @id @default(cuid())
  submissionId     String
  submission       QuizSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String?
  selectedOption   Option?         @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction)
  answerText       String?
}

model LearningPath {
  id             String               @id @default(cuid())
  title          String
  description    String
  hasCertificate Boolean              @default(false)
  courses        LearningPathCourse[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model LearningPathCourse {
  learningPathId String
  courseId       String
  order          Int
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([learningPathId, courseId])
}

model LiveSession {
  id                 String                    @id @default(cuid())
  title              String
  speaker            String
  description        String
  keyTakeaways       String
  dateTime           DateTime
  platform           LiveSessionPlatform
  joinUrl            String
  recordingUrl       String?
  attendees          UserAttendedLiveSession[]
  isRestricted       Boolean                   @default(false)
  allowedAttendees   LiveSessionAllowedUser[]
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
}

model UserAttendedLiveSession {
  userId     String
  sessionId  String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session    LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  attendedAt DateTime    @default(now())

  @@id([userId, sessionId])
}

model LiveSessionAllowedUser {
  userId     String
  sessionId  String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session    LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([userId, sessionId])
}

model Badge {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]
}

model UserBadge {
  userId    String
  badgeId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt  DateTime @default(now())

  @@id([userId, badgeId])
}

model CertificateTemplate {
  id             String  @id
  title          String
  organization   String
  body           String
  signatoryName  String
  signatoryTitle String
  signatureUrl   String?
  stampUrl       String?
}

model RegistrationField {
  id        String   @id @default(cuid())
  label     String
  type      FieldType
  options   String[]
  enabled   Boolean  @default(false)
  required  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model LoginHistory {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
}


enum ModuleType {
  video
  pdf
  slides
  audio
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
}

enum SubmissionStatus {
  IN_PROGRESS
  COMPLETED
  PENDING_REVIEW
}

enum QuizType {
  OPEN_LOOP
  CLOSED_LOOP
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  SELECT
}

enum Currency {
  USD
  ETB
}
