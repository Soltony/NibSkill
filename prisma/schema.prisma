// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TrainingProvider {
  id            String   @id @default(cuid())
  name          String   @unique
  address       String
  accountNumber String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  users       User[]
  products    Product[]
  courses     Course[]
  learningPaths LearningPath[]
  liveSessions LiveSession[]
  registrationFields RegistrationField[]
  districts   District[]
  branches    Branch[]
  departments Department[]
  roles       Role[]


  @@map("training_providers")
}

model District {
  id        String   @id @default(cuid())
  name      String
  branches  Branch[]
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])

  @@map("districts")
}

model Branch {
  id         String    @id @default(cuid())
  name       String
  district   District  @relation(fields: [districtId], references: [id])
  districtId String
  users      User[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])

  @@map("branches")
}

model Department {
  id        String   @id @default(cuid())
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])


  @@map("departments")
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String
  password             String
  avatarUrl            String?
  phoneNumber          String?
  role                 Role                   @relation(fields: [roleId], references: [id])
  roleId               String
  department           Department?            @relation(fields: [departmentId], references: [id])
  departmentId         String?
  district             District?              @relation(fields: [districtId], references: [id])
  districtId           String?
  branch               Branch?                @relation(fields: [branchId], references: [id])
  branchId             String?
  activeSessionId      String?
  loginHistory         LoginHistory[]
  completedModules     UserCompletedModule[]
  completedCourses     UserCompletedCourse[]
  quizSubmissions      QuizSubmission[]
  badges               UserBadge[]
  attendedLiveSessions UserAttendedLiveSession[]
  allowedLiveSessions  LiveSessionAllowedUser[]
  notifications        Notification[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  trainingProviderId   String?
  trainingProvider     TrainingProvider?      @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])
  @@map("users")
}

model LoginHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  loginTime DateTime @default(now())
  ipAddress String?
  userAgent String?

  @@map("login_histories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String
  imageHint   String?
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])

  @@map("products")
}

model Course {
  id               String                @id @default(cuid())
  title            String
  description      String
  imageUrl         String?
  imageDescription String?
  imageHint        String?
  isPaid           Boolean               @default(false)
  price            Float?
  currency         Currency?
  hasCertificate   Boolean               @default(false)
  product          Product               @relation(fields: [productId], references: [id])
  productId        String
  modules          Module[]
  quiz             Quiz?
  status           String                @default("PENDING") // PENDING, PUBLISHED
  learningPaths    LearningPathCourse[]
  completedBy      UserCompletedCourse[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt

  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])

  @@map("courses")
}

model Module {
  id                 String                @id @default(cuid())
  title              String
  description        String
  type               ModuleType
  duration           Int
  content            String
  course             Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId           String
  completedBy        UserCompletedModule[]
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  @@map("modules")
}

model UserCompletedModule {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  module     Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, moduleId])
  @@map("user_completed_modules")
}

model UserCompletedCourse {
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  completionDate DateTime @default(now())
  score          Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([userId, courseId])
  @@map("user_completed_courses")
}

model LearningPath {
  id           String               @id @default(cuid())
  title        String
  description  String?
  hasCertificate Boolean            @default(false)
  courses      LearningPathCourse[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])

  @@map("learning_paths")
}

model LearningPathCourse {
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  order          Int

  @@id([learningPathId, courseId])
  @@map("learning_path_courses")
}

model Quiz {
  id                    String           @id @default(cuid())
  course                Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId              String           @unique
  passingScore          Float
  timeLimit             Int // in minutes, 0 for no limit
  questions             Question[]
  quizType              QuizType
  requiresManualGrading Boolean          @default(false)
  submissions           QuizSubmission[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  @@map("quizzes")
}

model Question {
  id              String         @id @default(cuid())
  text            String
  type            QuestionType
  quiz            Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  options         Option[]
  correctAnswerId String // For MULTIPLE_CHOICE this is an Option ID, for others it's the answer text
  weight          Float          @default(1)
  answers         Answer[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("questions")
}

model Option {
  id              String     @id @default(cuid())
  text            String
  question        Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String
  selectedAnswers Answer[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("options")
}

model QuizSubmission {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  score     Float?
  status    String // PENDING_REVIEW, COMPLETED
  answers   Answer[]
  submittedAt DateTime @default(now())
  gradedAt    DateTime?

  @@map("quiz_submissions")
}

model Answer {
  id               String          @id @default(cuid())
  submission       QuizSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId     String
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  selectedOption   Option?         @relation(fields: [selectedOptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  selectedOptionId String?
  answerText       String?

  @@map("answers")
}

model Badge {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("badges")
}

model UserBadge {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, badgeId])
  @@map("user_badges")
}

model LiveSession {
  id                 String                   @id @default(cuid())
  title              String
  description        String
  speaker            String
  keyTakeaways       String
  dateTime           DateTime
  platform           LiveSessionPlatform
  joinUrl            String
  recordingUrl       String?
  isRestricted       Boolean                  @default(false)
  allowedAttendees   LiveSessionAllowedUser[]
  attendedBy         UserAttendedLiveSession[]
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt

  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])

  @@map("live_sessions")
}

model UserAttendedLiveSession {
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  attendedAt DateTime    @default(now())

  @@id([userId, sessionId])
  @@map("user_attended_live_sessions")
}

model LiveSessionAllowedUser {
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    sessionId String

    @@id([userId, sessionId])
    @@map("live_session_allowed_users")
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions Json
    users       User[]
    
    trainingProviderId String?
    trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
    @@index([trainingProviderId])
}

model CertificateTemplate {
    id             String  @id
    title          String
    organization   String
    body           String
    signatoryName  String
    signatoryTitle String
    signatureUrl   String?
    stampUrl       String?
}

model RegistrationField {
    id        String    @id
    label     String
    type      FieldType
    enabled   Boolean
    required  Boolean
    options   String[]
    isLoginIdentifier Boolean? @default(false)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    
    trainingProviderId String?
    trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
    @@index([trainingProviderId])

    @@map("registration_fields")
}

model Notification {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notifications")
}


enum Currency {
  USD
  ETB
}

enum ModuleType {
  VIDEO
  PDF
  SLIDES
  AUDIO
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
}

enum QuizType {
  OPEN_LOOP
  CLOSED_LOOP
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  SELECT
}
