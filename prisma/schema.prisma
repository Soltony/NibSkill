
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String                   @id @default(cuid())
  name                 String
  email                String                   @unique
  password             String
  avatarUrl            String?
  roleId               String
  departmentId         String?
  districtId           String?
  branchId             String?
  phoneNumber          String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  role                 Role                     @relation(fields: [roleId], references: [id])
  department           Department?              @relation(fields: [departmentId], references: [id])
  district             District?                @relation(fields: [districtId], references: [id])
  branch               Branch?                  @relation(fields: [branchId], references: [id])
  badges               UserBadge[]
  completedCourses     UserCompletedCourse[]
  attendedSessions     UserAttendedLiveSession[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]
}

model District {
  id       String   @id @default(cuid())
  name     String   @unique
  users    User[]
  branches Branch[]
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Branch {
  id         String   @id @default(cuid())
  name       String
  districtId String
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  users      User[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String
  imageHint   String?
  courses     Course[]
}

model Course {
  id                String                 @id @default(cuid())
  title             String
  description       String
  imageUrl          String?
  imageDescription  String?
  imageHint         String?
  productId         String
  product           Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  modules           Module[]
  learningPaths     LearningPathCourse[]
  quiz              Quiz?
  userCompletions   UserCompletedCourse[]
}

model Module {
  id          String     @id @default(cuid())
  title       String
  description String
  type        ModuleType
  duration    Int
  content     String
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum ModuleType {
  video
  pdf
  slides
  audio
}

model LearningPath {
  id          String               @id @default(cuid())
  title       String
  description String?
  courses     LearningPathCourse[]
}

model LearningPathCourse {
  learningPathId String
  courseId       String
  order          Int                  @default(0)
  learningPath   LearningPath         @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([learningPathId, courseId])
}

model LiveSession {
  id            String                    @id @default(cuid())
  title         String
  description   String
  speaker       String
  keyTakeaways  String
  dateTime      DateTime
  platform      LiveSessionPlatform
  joinUrl       String
  recordingUrl  String?
  attendees     UserAttendedLiveSession[]
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

model UserAttendedLiveSession {
  userId     String
  sessionId  String
  attendedAt DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session    LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([userId, sessionId])
}

model Quiz {
  id           String     @id @default(cuid())
  courseId     String     @unique
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  passingScore Int
  timeLimit    Int?
  questions    Question[]
}

model Question {
  id              String       @id @default(cuid())
  text            String
  type            QuestionType
  quizId          String
  quiz            Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctAnswerId String
}

enum QuestionType {
  multiple_choice
  true_false
  fill_in_the_blank
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Badge {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]
}

model UserBadge {
  userId  String
  badgeId String
  date    DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
}

model UserCompletedCourse {
  userId         String
  courseId       String
  completionDate DateTime @default(now())
  score          Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model CertificateTemplate {
  id             String  @id @default("singleton")
  title          String
  organization   String
  body           String
  signatoryName  String
  signatoryTitle String
  signatureUrl   String?
  stampUrl       String?
}

model RegistrationField {
  id        String  @id
  label     String
  enabled   Boolean @default(false)
  required  Boolean @default(false)
}
