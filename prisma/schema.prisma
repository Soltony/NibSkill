// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  name                  String
  email                 String                  @unique
  password              String
  avatarUrl             String?
  phoneNumber           String?
  departmentId          String?
  districtId            String?
  branchId              String?
  roleId                String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  role                  Role                    @relation(fields: [roleId], references: [id])
  department            Department?             @relation(fields: [departmentId], references: [id])
  district              District?               @relation(fields: [districtId], references: [id])
  branch                Branch?                 @relation(fields: [branchId], references: [id])
  completedCourses      UserCompletedCourse[]
  attendedSessions      UserAttendedLiveSession[]
  badges                UserBadge[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model District {
  id        String   @id @default(cuid())
  name      String   @unique
  branches  Branch[]
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id         String   @id @default(cuid())
  name       String
  districtId String
  district   District @relation(fields: [districtId], references: [id])
  users      User[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String
  imageHint   String
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id              String                @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  imageDescription String?
  imageHint       String?
  productId       String
  product         Product               @relation(fields: [productId], references: [id])
  modules         Module[]
  quiz            Quiz?
  learningPaths   LearningPathCourse[]
  completedBy     UserCompletedCourse[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String // video, pdf, slides
  duration    Int
  content     String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id           String     @id @default(cuid())
  courseId     String     @unique
  passingScore Int
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    Question[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Question {
  id              String      @id @default(cuid())
  text            String
  type            QuestionType
  correctAnswerId String
  quizId          String
  quiz            Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LearningPath {
  id          String               @id @default(cuid())
  title       String
  description String
  courses     LearningPathCourse[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model LearningPathCourse {
  learningPathId String
  courseId       String
  order          Int
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@id([learningPathId, courseId])
}

model LiveSession {
  id            String                    @id @default(cuid())
  title         String
  description   String
  speaker       String
  keyTakeaways  String
  dateTime      DateTime
  platform      LiveSessionPlatform
  joinUrl       String
  recordingUrl  String?
  attendees     UserAttendedLiveSession[]
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
}

model UserCompletedCourse {
  userId         String
  courseId       String
  completionDate DateTime @default(now())
  score          Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([userId, courseId])
}

model UserAttendedLiveSession {
  userId      String
  sessionId   String
  attendedAt  DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@id([userId, sessionId])
}

model Badge {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UserBadge {
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, badgeId])
}

model CertificateTemplate {
  id             String    @id @default("singleton")
  title          String
  organization   String
  body           String
  signatoryName  String
  signatoryTitle String
  signatureUrl   String?
  stampUrl       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model RegistrationField {
  id       String   @id
  label    String
  enabled  Boolean  @default(false)
  required Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum QuestionType {
  multiple_choice
  true_false
  fill_in_the_blank
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}
