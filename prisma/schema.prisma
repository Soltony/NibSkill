// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                    @id @default(cuid())
  name                  String
  email                 String                    @unique
  avatarUrl             String?
  phoneNumber           String?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  departmentId          String?
  districtId            String?
  branchId              String?
  roleId                String
  department            Department?               @relation(fields: [departmentId], references: [id])
  district              District?                 @relation(fields: [districtId], references: [id])
  branch                Branch?                   @relation(fields: [branchId], references: [id])
  role                  Role                      @relation(fields: [roleId], references: [id])
  completedCourses      UserCompletedCourse[]
  attendedLiveSessions  UserAttendedLiveSession[]
  badges                UserBadge[]
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model District {
  id       String   @id @default(cuid())
  name     String   @unique
  users    User[]
  branches Branch[]
}

model Branch {
  id         String    @id @default(cuid())
  name       String
  districtId String
  district   District  @relation(fields: [districtId], references: [id])
  users      User[]

  @@unique([name, districtId])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String
  imageHint   String
  courses     Course[]
}

model Course {
  id               String                @id @default(cuid())
  title            String
  description      String
  productId        String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  imageUrl         String?
  imageDescription String?
  imageHint        String?
  product          Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  modules          Module[]
  quiz             Quiz?
  learningPaths    LearningPathCourse[]
  completedBy      UserCompletedCourse[]
}

model Module {
  id          String  @id @default(cuid())
  title       String
  description String
  type        String
  duration    Int
  content     String
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Quiz {
  id           String     @id @default(cuid())
  courseId     String     @unique
  passingScore Int
  questions    Question[]
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum QuestionType {
  multiple_choice
  true_false
  fill_in_the_blank
}

model Question {
  id              String       @id @default(cuid())
  text            String
  type            QuestionType
  correctAnswerId String
  quizId          String
  quiz            Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields([questionId]), references([id]), onDelete: Cascade)
}

model LearningPath {
  id          String               @id @default(cuid())
  title       String
  description String?
  courses     LearningPathCourse[]
}

model LearningPathCourse {
  learningPathId String
  courseId       String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([learningPathId, courseId])
}

model UserCompletedCourse {
  userId         String
  courseId       String
  completionDate DateTime @default(now())
  score          Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

model LiveSession {
  id           String                  @id @default(cuid())
  title        String
  description  String
  speaker      String
  keyTakeaways String
  dateTime     DateTime
  platform     LiveSessionPlatform
  joinUrl      String
  recordingUrl String?
  attendees    UserAttendedLiveSession[]
}

model UserAttendedLiveSession {
  userId    String
  sessionId String
  attendedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([userId, sessionId])
}

model Badge {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]
}

model UserBadge {
  userId  String
  badgeId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
}

model CertificateTemplate {
  id             String    @id @default("singleton")
  title          String
  organization   String
  body           String
  signatoryName  String
  signatoryTitle String
  signatureUrl   String?
  stampUrl       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
