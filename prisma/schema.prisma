// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TrainingProvider {
  id              String                @id @default(cuid())
  name            String                @unique
  address         String
  accountNumber   String                @unique
  users           User[]
  products        Product[]
  courses         Course[]
  learningPaths   LearningPath[]
  liveSessions    LiveSession[]
  districts       District[]
  departments     Department[]
  branches        Branch[]
  CertificateTemplate CertificateTemplate?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  RegistrationField RegistrationField[]
}

model User {
  id                  String                    @id @default(cuid())
  email               String                    @unique
  name                String
  password            String?
  avatarUrl           String?
  roleId              String
  role                Role                      @relation(fields: [roleId], references: [id])
  departmentId        String?
  department          Department?               @relation(fields: [departmentId], references: [id])
  districtId          String?
  district            District?                 @relation(fields: [districtId], references: [id])
  branchId            String?
  branch              Branch?                   @relation(fields: [branchId], references: [id])
  phoneNumber         String?
  trainingProviderId  String?
  trainingProvider    TrainingProvider?         @relation(fields: [trainingProviderId], references: [id])
  activeSessionId     String?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  completedCourses    UserCompletedCourse[]
  completedModules    UserCompletedModule[]
  badges              UserBadge[]
  attendedSessions    UserAttendedLiveSession[]
  allowedSessions     LiveSessionAllowedUser[]
  loginHistory        LoginHistory[]
  notifications       Notification[]
  quizSubmissions     QuizSubmission[]
}

model LoginHistory {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime DateTime  @default(now())
  ipAddress String?
  userAgent String?
}

model Role {
  id                 String  @id @default(cuid())
  name               String
  permissions        Json
  users              User[]
  trainingProviderId String?
  
  @@unique([name, trainingProviderId])
}

model District {
    id                 String   @id @default(cuid())
    name               String
    trainingProviderId String
    trainingProvider   TrainingProvider @relation(fields: [trainingProviderId], references: [id])
    branches           Branch[]
    users              User[]
    
    @@unique([name, trainingProviderId])
}

model Branch {
    id                 String   @id @default(cuid())
    name               String
    trainingProviderId String
    trainingProvider   TrainingProvider @relation(fields: [trainingProviderId], references: [id])
    districtId         String
    district           District @relation(fields: [districtId], references: [id])
    users              User[]

    @@unique([name, districtId])
}

model Department {
    id                 String   @id @default(cuid())
    name               String
    trainingProviderId String
    trainingProvider   TrainingProvider @relation(fields: [trainingProviderId], references: [id])
    users              User[]

    @@unique([name, trainingProviderId])
}

model Product {
  id                 String   @id @default(cuid())
  name               String
  description        String
  imageUrl           String
  imageHint          String?
  courses            Course[]
  trainingProviderId String
  trainingProvider   TrainingProvider @relation(fields: [trainingProviderId], references: [id])
}

model Course {
  id                   String                  @id @default(cuid())
  title                String
  description          String
  productId            String?
  product              Product?                @relation(fields: [productId], references: [id])
  modules              Module[]
  quiz                 Quiz?
  completedBy          UserCompletedCourse[]
  learningPaths        CourseOnLearningPath[]
  imageUrl             String?
  imageDescription     String?
  imageHint            String?
  isPaid               Boolean                 @default(false)
  price                Float?
  currency             Currency?
  hasCertificate       Boolean                 @default(false)
  status               String                  @default("PENDING") // PENDING, PUBLISHED
  trainingProviderId   String
  trainingProvider     TrainingProvider        @relation(fields: [trainingProviderId], references: [id])
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
}

model Module {
  id                 String                @id @default(cuid())
  title              String
  description        String
  type               ModuleType
  duration           Int
  content            String
  courseId           String
  course             Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedBy        UserCompletedModule[]
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
}

model UserCompletedModule {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId   String
  module     Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@id([userId, moduleId])
}

model UserCompletedCourse {
    userId         String
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId       String
    course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    completionDate DateTime @default(now())
    score          Float
    
    @@id([userId, courseId])
}

model Badge {
    id          String      @id @default(cuid())
    title       String      @unique
    description String
    icon        String
    users       UserBadge[]
}

model UserBadge {
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    badgeId String
    badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
    earnedAt DateTime @default(now())

    @@id([userId, badgeId])
}

model LearningPath {
  id                 String                 @id @default(cuid())
  title              String
  description        String
  hasCertificate     Boolean                @default(false)
  trainingProviderId String
  trainingProvider   TrainingProvider       @relation(fields: [trainingProviderId], references: [id])
  courses            CourseOnLearningPath[]
}

model CourseOnLearningPath {
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  order          Int

  @@id([courseId, learningPathId])
}

model LiveSession {
    id              String                    @id @default(cuid())
    title           String
    description     String
    speaker         String
    keyTakeaways    String
    dateTime        DateTime
    platform        LiveSessionPlatform
    joinUrl         String
    recordingUrl    String?
    isRestricted    Boolean                   @default(false)
    trainingProviderId String
    trainingProvider TrainingProvider         @relation(fields: [trainingProviderId], references: [id])
    allowedAttendees LiveSessionAllowedUser[]
    attendedBy      UserAttendedLiveSession[]
}

model LiveSessionAllowedUser {
    sessionId String
    session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    userId    String
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([sessionId, userId])
}


model UserAttendedLiveSession {
    userId     String
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    sessionId  String
    session    LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    attendedAt DateTime  @default(now())

    @@id([userId, sessionId])
}

model CertificateTemplate {
  id                 String           @id @default(cuid())
  title              String
  organization       String
  body               String
  signatoryName      String
  signatoryTitle     String
  signatureUrl       String?
  stampUrl           String?
  trainingProviderId String           @unique
  trainingProvider   TrainingProvider @relation(fields: [trainingProviderId], references: [id])
}

model RegistrationField {
  id                 String           @id @default(cuid())
  label              String
  type               FieldType
  enabled            Boolean
  required           Boolean
  options            String[]
  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])

  @@unique([label, trainingProviderId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Quiz {
  id                    String           @id @default(cuid())
  courseId              String           @unique
  course                Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  passingScore          Float
  timeLimit             Int // in minutes
  quizType              QuizType
  questions             Question[]
  submissions           QuizSubmission[]
  requiresManualGrading Boolean          @default(false)
}

model Question {
  id              String           @id @default(cuid())
  text            String
  type            QuestionType
  options         Option[]
  correctAnswerId String
  weight          Float
  quizId          String
  quiz            Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers         Answer[]
  createdAt       DateTime         @default(now())
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model QuizSubmission {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score      Float?
  status     String // PENDING_REVIEW, COMPLETED
  submittedAt DateTime @default(now())
  gradedAt   DateTime?
  answers    Answer[]
}

model Answer {
  id               String          @id @default(cuid())
  submissionId     String
  submission       QuizSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String?
  answerText       String?
}

enum ModuleType {
  VIDEO
  PDF
  SLIDES
  AUDIO
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  SELECT
}

enum QuizType {
  OPEN_LOOP
  CLOSED_LOOP
}

enum Currency {
  USD
  ETB
}
