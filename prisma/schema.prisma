
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model TrainingProvider {
  id                  String               @id @default(cuid())
  name                String               @unique
  address             String
  accountNumber       String               @unique
  users               User[]
  products            Product[]
  courses             Course[]
  learningPaths       LearningPath[]
  liveSessions        LiveSession[]
  certificateTemplate CertificateTemplate?
  districts           District[]
  departments         Department[]
  branches            Branch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   String                  @id @default(cuid())
  name                 String
  email                String                  @unique
  password             String
  avatarUrl            String?
  phoneNumber          String?
  activeSessionId      String?

  roleId               String
  role                 Role                    @relation(fields: [roleId], references: [id])

  departmentId         String?
  department           Department?             @relation(fields: [departmentId], references: [id])

  districtId           String?
  district             District?               @relation(fields: [districtId], references: [id])

  branchId             String?
  branch               Branch?                 @relation(fields: [branchId], references: [id])

  trainingProviderId   String?
  trainingProvider     TrainingProvider?       @relation(fields: [trainingProviderId], references: [id])

  completedModules     UserCompletedModule[]
  completedCourses     UserCompletedCourse[]
  badges               UserBadge[]
  attendedSessions     UserAttendedLiveSession[]
  allowedSessions      LiveSessionAllowedUser[]
  quizSubmissions      QuizSubmission[]
  loginHistory         LoginHistory[]
  notifications        Notification[]

  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
}

model Role {
  id                 String            @id @default(cuid())
  name               String
  permissions        Json
  trainingProviderId String?
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  users              User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, trainingProviderId])
}

model District {
  id                 String            @id @default(cuid())
  name               String
  trainingProviderId String
  trainingProvider   TrainingProvider  @relation(fields: [trainingProviderId], references: [id])
  branches           Branch[]
  users              User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id                 String           @id @default(cuid())
  name               String
  districtId         String
  district           District         @relation(fields: [districtId], references: [id])
  trainingProviderId String
  trainingProvider   TrainingProvider @relation(fields: [trainingProviderId], references: [id])
  users              User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id                 String           @id @default(cuid())
  name               String
  trainingProviderId String
  trainingProvider   TrainingProvider @relation(fields: [trainingProviderId], references: [id])
  users              User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String           @id @default(cuid())
  name               String
  description        String
  imageUrl           String
  imageHint          String?
  trainingProviderId String
  trainingProvider   TrainingProvider @relation(fields: [trainingProviderId], references: [id])
  courses            Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id                  String                @id @default(cuid())
  title               String
  description         String
  imageUrl            String?
  imageDescription    String?
  imageHint           String?
  isPaid              Boolean               @default(false)
  price               Float?
  currency            Currency?
  hasCertificate      Boolean               @default(false)
  status              String                @default("PENDING") // PENDING, PUBLISHED
  trainingProviderId  String
  trainingProvider    TrainingProvider      @relation(fields: [trainingProviderId], references: [id])
  productId           String?
  product             Product?              @relation(fields: [productId], references: [id])
  modules             Module[]
  quiz                Quiz?
  completedBy         UserCompletedCourse[]
  learningPathCourses LearningPathCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Currency {
  USD
  ETB
}

model Module {
  id                 String                @id @default(cuid())
  title              String
  description        String
  type               ModuleType
  duration           Int
  content            String
  courseId           String
  course             Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedBy        UserCompletedModule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ModuleType {
  VIDEO
  PDF
  SLIDES
  AUDIO
}

model LearningPath {
  id                 String               @id @default(cuid())
  title              String
  description        String
  hasCertificate     Boolean              @default(false)
  trainingProviderId String
  trainingProvider   TrainingProvider     @relation(fields: [trainingProviderId], references: [id])
  courses            LearningPathCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningPathCourse {
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order          Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([learningPathId, courseId])
}

model LiveSession {
  id                 String                    @id @default(cuid())
  title              String
  description        String
  speaker            String
  keyTakeaways       String
  dateTime           DateTime
  platform           LiveSessionPlatform
  joinUrl            String
  recordingUrl       String?
  isRestricted       Boolean                   @default(false)
  trainingProviderId String
  trainingProvider   TrainingProvider          @relation(fields: [trainingProviderId], references: [id])
  attendedBy         UserAttendedLiveSession[]
  allowedAttendees   LiveSessionAllowedUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

model Quiz {
  id                    String           @id @default(cuid())
  courseId              String           @unique
  course                Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  passingScore          Int
  timeLimit             Int // in minutes, 0 for no limit
  quizType              QuizType
  requiresManualGrading Boolean          @default(false)
  questions             Question[]
  submissions           QuizSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuizType {
  OPEN_LOOP
  CLOSED_LOOP
}

model Question {
  id              String       @id @default(cuid())
  text            String
  type            QuestionType
  weight          Float        @default(1)
  quizId          String
  quiz            Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctAnswerId String // For MC/TF, this is an Option ID. For others, it's the answer text.
  answers         Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
}

model Option {
  id          String   @id @default(cuid())
  text        String
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizSubmission {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int?
  status    String // PENDING_REVIEW, COMPLETED
  gradedAt  DateTime?
  answers   Answer[]

  submittedAt DateTime @default(now())
}

model Answer {
  id               String        @id @default(cuid())
  submissionId     String
  submission       QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId String?
  answerText       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCompletedModule {
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId String
  module   Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([userId, moduleId])
}

model UserCompletedCourse {
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completionDate DateTime @default(now())
  score          Int

  @@id([userId, courseId])
}

model UserBadge {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId String
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([userId, badgeId])
}

model Badge {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAttendedLiveSession {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  attendedAt DateTime @default(now())

  @@id([userId, sessionId])
}

model LiveSessionAllowedUser {
  sessionId String
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([sessionId, userId])
}

model CertificateTemplate {
  id                 String            @id @default(cuid())
  trainingProviderId String            @unique
  trainingProvider   TrainingProvider  @relation(fields: [trainingProviderId], references: [id])
  title              String
  organization       String
  body               String
  signatoryName      String
  signatoryTitle     String
  signatureUrl       String?
  stampUrl           String?
  primaryColor       String?
  borderStyle        String?
  templateStyle      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationField {
  id                 String            @id @default(cuid())
  label              String
  type               FieldType
  enabled            Boolean           @default(true)
  required           Boolean           @default(false)
  options            String[]
  isLoginIdentifier  Boolean?          @default(false)
  trainingProviderId String? // Null for default fields
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  SELECT
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime DateTime @default(now())
  ipAddress String?
  userAgent String?
}

model Notification {
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    title String
    description String
    isRead Boolean @default(false)
    createdAt DateTime @default(now())
}
