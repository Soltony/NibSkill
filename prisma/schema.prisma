// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  avatarUrl      String
  roleId         String
  role           Role      @relation(fields: [roleId], references: [id])
  departmentId   String?
  department     Department? @relation(fields: [departmentId], references: [id])
  districtId     String?
  district       District? @relation(fields: [districtId], references: [id])
  branchId       String?
  branch         Branch?   @relation(fields: [branchId], references: [id])
  phoneNumber    String?
  activeSessionId String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  completedModules UserCompletedModule[]
  completedCourses UserCompletedCourse[]
  attendedSessions UserAttendedLiveSession[]
  badges           UserBadge[]
  loginHistory     LoginHistory[]
}

model UserCompletedModule {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId  String
  completedAt DateTime @default(now())

  @@id([userId, moduleId])
}

model UserCompletedCourse {
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        String
  completionDate  DateTime  @default(now())
  score           Int
  quizStatus      QuizStatus @default(COMPLETED)
  gradedById      String?
  gradedBy        User?     @relation("GradedCourses", fields: [gradedById], references: [id], onDelete: SetNull)
  gradedAt        DateTime?

  @@id([userId, courseId])
}

model LoginHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime DateTime @default(now())
  ipAddress String?
  userAgent String?
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions Json
  users       User[]
}

model Badge {
  id          String      @id
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]
}

model UserBadge {
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId  String
  assignedAt DateTime @default(now())

  @@id([userId, badgeId])
}

model Product {
  id           String   @id @default(uuid())
  name         String   @unique
  description  String
  imageUrl     String
  imageHint    String
  courses      Course[]
}

model Course {
  id              String   @id @default(uuid())
  title           String   @unique
  description     String
  imageUrl        String?
  imageDescription String?
  imageHint       String?
  productId       String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  modules         Module[]
  quiz            Quiz?
  learningPaths   LearningPathCourse[]
  completedBy     UserCompletedCourse[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Module {
  id          String   @id @default(uuid())
  title       String
  description String
  type        ModuleType
  duration    Int
  content     String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedBy UserCompletedModule[]
}

model Quiz {
  id           String  @id @default(uuid())
  courseId     String  @unique
  course       Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  passingScore Int
  timeLimit    Int?
  quizType     QuizType @default(OPEN_LOOP)
  requiresManualGrading Boolean @default(false)
  questions    Question[]
}

model Question {
  id              String      @id @default(uuid())
  text            String
  type            QuestionType
  quizId          String
  quiz            Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctAnswerId String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Option {
  id         String   @id @default(uuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LearningPath {
  id          String               @id @default(uuid())
  title       String
  description String
  courses     LearningPathCourse[]
}

model LearningPathCourse {
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order          Int

  @@id([learningPathId, courseId])
}

model LiveSession {
  id            String                    @id @default(uuid())
  title         String
  description   String
  speaker       String
  keyTakeaways  String
  dateTime      DateTime
  platform      LiveSessionPlatform
  joinUrl       String
  recordingUrl  String?
  attendees     UserAttendedLiveSession[]
}

model UserAttendedLiveSession {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  attendedAt DateTime @default(now())

  @@id([userId, sessionId])
}

model District {
  id      String   @id @default(uuid())
  name    String   @unique
  users   User[]
  branches Branch[]
}

model Branch {
  id          String   @id @default(uuid())
  name        String
  districtId  String
  district    District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  users       User[]

  @@unique([name, districtId])
}

model Department {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model CertificateTemplate {
  id             String  @id @default("singleton")
  title          String
  organization   String
  body           String
  signatoryName  String
  signatoryTitle String
  signatureUrl   String?
  stampUrl       String?
}

model RegistrationField {
  id        String   @id
  label     String
  type      FieldType
  options   String[]
  enabled   Boolean
  required  Boolean
  isLoginIdentifier Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ModuleType {
  video
  pdf
  slides
  audio
}

enum QuestionType {
  multiple_choice
  true_false
  fill_in_the_blank
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

enum FieldType {
    TEXT
    NUMBER
    DATE
    SELECT
}

enum QuizType {
  OPEN_LOOP
  CLOSED_LOOP
}

enum QuizStatus {
  COMPLETED
  PENDING_REVIEW
}