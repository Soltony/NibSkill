// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                    String                   @id @default(cuid())
  name                  String
  email                 String                   @unique
  password              String
  roleId                String
  role                  Role                     @relation(fields: [roleId], references: [id])
  departmentId          String?
  department            Department?              @relation(fields: [departmentId], references: [id])
  districtId            String?
  district              District?                @relation(fields: [districtId], references: [id])
  branchId              String?
  branch                Branch?                  @relation(fields: [branchId], references: [id])
  avatarUrl             String?
  phoneNumber           String?
  activeSessionId       String?                  @unique
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  completedCourses      UserCompletedCourse[]
  completedModules      UserCompletedModule[]
  badges                UserBadge[]
  attendedSessions      UserAttendedLiveSession[]
  loginHistory          LoginHistory[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]
}

model Course {
  id                  String                 @id @default(cuid())
  title               String
  description         String
  productId           String?
  product             Product?               @relation(fields: [productId], references: [id])
  imageUrl            String?
  imageDescription    String?
  imageHint           String?
  modules             Module[]
  learningPaths       CourseInLearningPath[]
  completedBy         UserCompletedCourse[]
  quiz                Quiz?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  type        ModuleType
  duration    Int
  content     String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedBy UserCompletedModule[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String
  imageHint   String
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LearningPath {
  id          String                 @id @default(cuid())
  title       String
  description String?
  courses     CourseInLearningPath[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model CourseInLearningPath {
  courseId      String
  learningPathId String
  order         Int                    @default(0)
  course        Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  learningPath  LearningPath           @relation(fields: [learningPathId], references: [id], onDelete: Cascade)

  @@id([courseId, learningPathId])
}

model LiveSession {
  id              String                    @id @default(cuid())
  title           String
  description     String
  speaker         String
  keyTakeaways    String
  dateTime        DateTime
  platform        LiveSessionPlatform
  joinUrl         String
  recordingUrl    String?
  attendees       UserAttendedLiveSession[]
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model Quiz {
  id           String     @id @default(cuid())
  courseId     String     @unique
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  passingScore Int        @default(80)
  timeLimit    Int        @default(0) // in minutes, 0 for no limit
  questions    Question[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Question {
  id              String   @id @default(cuid())
  text            String
  type            QuestionType
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctAnswerId String // For MC, this is an Option ID. For T/F, it's 'True' or 'False'. For Fill-in-blank, it's the answer string.
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// Junction table for User and Course completion
model UserCompletedCourse {
  userId         String
  courseId       String
  completionDate DateTime @default(now())
  score          Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

// Junction table for User and Module completion
model UserCompletedModule {
  userId    String
  moduleId  String
  completedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId])
}


model Badge {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  icon        String
  users       UserBadge[]
}

model UserBadge {
  userId  String
  badgeId String
  awardedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
}

model CertificateTemplate {
  id             String  @id @default("singleton")
  title          String
  organization   String
  body           String
  signatoryName  String
  signatoryTitle String
  signatureUrl   String?
  stampUrl       String?
}

model District {
  id      String   @id @default(cuid())
  name    String   @unique
  users   User[]
  branches Branch[]
}

model Branch {
  id          String   @id @default(cuid())
  name        String
  districtId  String
  district    District @relation(fields: [districtId], references: [id])
  users       User[]

  @@unique([name, districtId])
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model RegistrationField {
  id        String    @id
  label     String
  type      FieldType
  enabled   Boolean   @default(false)
  required  Boolean   @default(false)
  options   String[]
  isLoginIdentifier Boolean @default(false)
  createdAt DateTime  @default(now())
}

model LoginHistory {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
}

model UserAttendedLiveSession {
  userId      String
  sessionId   String
  attendedAt  DateTime @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([userId, sessionId])
}


enum ModuleType {
  video
  pdf
  slides
  audio
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

enum QuestionType {
  multiple_choice
  true_false
  fill_in_the_blank
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  SELECT
}
