
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TrainingProvider {
  id            String   @id @default(cuid())
  name          String   @unique
  address       String
  accountNumber String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User[]
}

model User {
  id                  String                  @id @default(cuid())
  name                String
  email               String                  @unique
  password            String
  avatarUrl           String?
  phoneNumber         String?
  roleId              String
  departmentId        String?
  districtId          String?
  branchId            String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  activeSessionId     String?

  trainingProviderId  String?
  trainingProvider    TrainingProvider?       @relation(fields: [trainingProviderId], references: [id])
  
  department          Department?             @relation(fields: [departmentId], references: [id])
  district            District?               @relation(fields: [districtId], references: [id])
  branch              Branch?                 @relation(fields: [branchId], references: [id])
  role                Role                    @relation(fields: [roleId], references: [id])
  badges              UserBadge[]
  completedCourses    UserCompletedCourse[]
  completedModules    UserCompletedModule[]
  liveSessions        UserAttendedLiveSession[]
  allowedLiveSessions LiveSessionAllowedUser[]
  quizSubmissions     QuizSubmission[]
  notifications       Notification[]
  loginHistory        LoginHistory[]

  @@index([trainingProviderId])
}

model District {
  id                 String  @id @default(cuid())
  name               String
  trainingProviderId String?
  users              User[]
  branches           Branch[]
  
  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])
}

model Branch {
  id                 String    @id @default(cuid())
  name               String
  districtId         String
  trainingProviderId String?
  district           District  @relation(fields: [districtId], references: [id])
  users              User[]

  trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
  @@index([trainingProviderId])
}

model Department {
  id                  String @id @default(cuid())
  name                String
  trainingProviderId  String?
  users               User[]
  trainingProvider    TrainingProvider? @relation(fields: [trainingProviderId], references: [id])

  @@index([trainingProviderId])
}

model Badge {
    id          String      @id @default(cuid())
    title       String      @unique
    description String
    icon        String
    users       UserBadge[]
}

model UserBadge {
    userId   String
    badgeId  String
    assignedAt DateTime @default(now())
    user     User     @relation(fields: [userId], references: [id])
    badge    Badge    @relation(fields: [badgeId], references: [id])

    @@id([userId, badgeId])
}

model Product {
  id                 String   @id @default(cuid())
  name               String
  description        String
  imageUrl           String
  imageHint          String?
  courses            Course[]
  trainingProviderId String?
}

model Course {
  id                 String                @id @default(cuid())
  title              String
  description        String
  imageUrl           String?
  imageDescription   String?
  imageHint          String?
  isPaid             Boolean               @default(false)
  price              Float?
  currency           Currency?
  hasCertificate     Boolean               @default(false)
  status             String                @default("PENDING") // PENDING, PUBLISHED
  modules            Module[]
  productId          String?
  product            Product?              @relation(fields: [productId], references: [id])
  completedBy        UserCompletedCourse[]
  learningPaths      LearningPathCourse[]
  quiz               Quiz?
  trainingProviderId String?

  @@index([productId])
  @@index([trainingProviderId])
}

model Module {
  id               String                @id @default(cuid())
  title            String
  description      String
  type             ModuleType
  duration         Int
  content          String
  courseId         String
  course           Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedBy      UserCompletedModule[]
  createdAt        DateTime              @default(now())

  @@index([courseId])
}

enum ModuleType {
  video
  pdf
  slides
  audio
}

model UserCompletedModule {
  userId     String
  moduleId   String
  completedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module     Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId])
}

model UserCompletedCourse {
  userId         String
  courseId       String
  completionDate DateTime @default(now())
  score          Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}


model LearningPath {
  id             String               @id @default(cuid())
  title          String
  description    String?
  hasCertificate Boolean              @default(false)
  courses        LearningPathCourse[]
  trainingProviderId String?
  
  @@index([trainingProviderId])
}

model LearningPathCourse {
  learningPathId String
  courseId       String
  order          Int
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([learningPathId, courseId])
}


model LiveSession {
  id              String                    @id @default(cuid())
  title           String
  description     String
  speaker         String
  keyTakeaways    String
  dateTime        DateTime
  platform        LiveSessionPlatform
  joinUrl         String
  recordingUrl    String?
  attendees       UserAttendedLiveSession[]
  isRestricted    Boolean                   @default(false)
  allowedAttendees LiveSessionAllowedUser[]
  trainingProviderId String?
  
  @@index([trainingProviderId])
}

model UserAttendedLiveSession {
  userId      String
  sessionId   String
  attendedAt  DateTime @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([userId, sessionId])
}

model LiveSessionAllowedUser {
    userId      String
    sessionId   String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    session     LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    
    @@id([userId, sessionId])
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

model Quiz {
  id                    String            @id @default(cuid())
  courseId              String            @unique
  course                Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  passingScore          Int
  timeLimit             Int
  quizType              QuizType
  requiresManualGrading Boolean           @default(false)
  questions             Question[]
  submissions           QuizSubmission[]
}

enum QuizType {
  OPEN_LOOP
  CLOSED_LOOP
}

model Question {
  id              String    @id @default(cuid())
  text            String
  type            QuestionType
  options         Option[]
  correctAnswerId String?
  weight          Float     @default(1)
  quizId          String
  quiz            Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers         Answer[]
  createdAt       DateTime  @default(now())

  @@index([quizId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@index([questionId])
}

model QuizSubmission {
  id          String        @id @default(cuid())
  userId      String
  quizId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     Answer[]
  score       Int?
  status      String        @default("PENDING_REVIEW") // PENDING_REVIEW, COMPLETED
  submittedAt DateTime      @default(now())
  gradedAt    DateTime?
  
  @@index([userId])
  @@index([quizId])
}

model Answer {
  id                String          @id @default(cuid())
  submissionId      String
  submission        QuizSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId  String?
  answerText        String?

  @@index([submissionId])
}

model CertificateTemplate {
    id              String @id
    title           String
    organization    String
    body            String
    signatoryName   String
    signatoryTitle  String
    signatureUrl    String?
    stampUrl        String?
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions Json
    users       User[]
    trainingProviderId String?
    trainingProvider   TrainingProvider? @relation(fields: [trainingProviderId], references: [id])
}

model RegistrationField {
  id                String @id
  label             String
  type              FieldType
  enabled           Boolean
  required          Boolean
  options           String[]
  isLoginIdentifier Boolean? @default(false)
  createdAt         DateTime @default(now())
  trainingProviderId String?
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  SELECT
}

model Notification {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())

  @@index([userId])
}

model LoginHistory {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime DateTime    @default(now())
  ipAddress String?
  userAgent String?
  
  @@index([userId])
}

enum Currency {
  USD
  ETB
}
