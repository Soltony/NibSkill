
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                   @id @default(cuid())
  name                  String
  email                 String                   @unique
  password              String
  avatarUrl             String?
  roleId                String
  departmentId          String?
  districtId            String?
  branchId              String?
  phoneNumber           String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  activeSessionId       String?

  role                  Role                     @relation(fields: [roleId], references: [id])
  department            Department?              @relation(fields: [departmentId], references: [id])
  district              District?                @relation(fields: [districtId], references: [id])
  branch                Branch?                  @relation(fields: [branchId], references: [id])
  badges                UserBadge[]
  completedModules      UserCompletedModule[]
  completedCourses      UserCompletedCourse[]
  attendedSessions      UserAttendedLiveSession[]
  allowedSessions       LiveSessionAllowedUser[]
  loginHistory          LoginHistory[]
  quizSubmissions       QuizSubmission[]
  gradedSubmissions     QuizSubmission[]         @relation("Grader")
  notifications         Notification[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]
}

model District {
  id        String    @id @default(cuid())
  name      String    @unique
  branches  Branch[]
  users     User[]
}

model Branch {
  id          String    @id @default(cuid())
  name        String
  districtId  String
  district    District  @relation(fields: [districtId], references: [id])
  users       User[]
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Product {
  id             String    @id @default(cuid())
  name           String
  description    String    @db.Text
  imageUrl       String
  imageHint      String
  courses        Course[]
}

model Course {
  id                  String                @id @default(cuid())
  title               String
  description         String                @db.Text
  productId           String
  isPaid              Boolean               @default(false)
  price               Float?
  imageUrl            String?
  imageDescription    String?
  imageHint           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  product             Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  modules             Module[]
  learningPathItems   LearningPathItem[]
  quiz                Quiz?
  completedBy         UserCompletedCourse[]
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  type        ModuleType
  duration    Int
  content     String    @db.Text
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedBy UserCompletedModule[]
}

model LearningPath {
  id          String              @id @default(cuid())
  title       String
  description String
  courses     LearningPathItem[]
}

model LearningPathItem {
  id              String      @id @default(cuid())
  learningPathId  String
  courseId        String
  order           Int

  learningPath    LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course          Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([learningPathId, order])
}

model LiveSession {
  id                String                    @id @default(cuid())
  title             String
  description       String
  speaker           String
  keyTakeaways      String
  dateTime          DateTime
  platform          LiveSessionPlatform
  joinUrl           String
  recordingUrl      String?
  isRestricted      Boolean                   @default(false)
  attendees         UserAttendedLiveSession[]
  allowedAttendees  LiveSessionAllowedUser[]
}

model Quiz {
  id                      String    @id @default(cuid())
  courseId                String    @unique
  passingScore            Int
  timeLimit               Int       @default(0) // in minutes, 0 for no limit
  quizType                QuizType
  requiresManualGrading   Boolean   @default(false)

  course      Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   Question[]
  submissions QuizSubmission[]
}

model Question {
  id              String      @id @default(cuid())
  quizId          String
  text            String
  type            QuestionType
  weight          Float       @default(1)
  correctAnswerId String      // For MC/TF, it's an Option ID. For FIB, it's the text answer.
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  quiz            Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  answers         Answer[]
}

model Option {
  id          String   @id @default(cuid())
  questionId  String
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizSubmission {
  id                String      @id @default(cuid())
  userId            String
  quizId            String
  submittedAt       DateTime    @default(now())
  score             Int?
  status            QuizStatus  @default(PENDING_REVIEW)
  gradedAt          DateTime?
  gradedById        String?

  user              User        @relation(fields: [userId], references: [id])
  quiz              Quiz        @relation(fields: [quizId], references: [id])
  grader            User?       @relation("Grader", fields: [gradedById], references: [id])
  answers           Answer[]
}

model Answer {
  id              String      @id @default(cuid())
  submissionId    String
  questionId      String
  answerText      String?     @db.Text // Used for FIB
  selectedOptionId String?    // Used for MC/TF
  isCorrect       Boolean?    // Null until graded

  submission      QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question        Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Badge {
  id           String      @id @default(cuid())
  title        String      @unique
  description  String
  icon         String
  users        UserBadge[]
}

model RegistrationField {
  id        String    @id
  label     String
  type      FieldType
  enabled   Boolean   @default(false)
  required  Boolean   @default(false)
  options   String[]
  isLoginIdentifier Boolean? @default(false)
  createdAt DateTime @default(now())
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  loginTime DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBadge {
  userId    String
  badgeId   String
  assignedAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge   @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
}

model UserCompletedModule {
  userId    String
  moduleId  String
  completedAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId])
}

model UserCompletedCourse {
  userId            String
  courseId          String
  completionDate    DateTime @default(now())
  score             Int

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@id([userId, courseId])
}


model UserAttendedLiveSession {
  userId      String
  sessionId   String
  attendedAt  DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([userId, sessionId])
}

model LiveSessionAllowedUser {
  userId      String
  sessionId   String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([userId, sessionId])
}

model CertificateTemplate {
  id              String    @id
  title           String
  organization    String
  body            String    @db.Text
  signatoryName   String
  signatoryTitle  String
  signatureUrl    String?   @db.Text
  stampUrl        String?   @db.Text
}

enum ModuleType {
  video
  pdf
  slides
  audio
}

enum LiveSessionPlatform {
  Zoom
  Google_Meet
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
}

enum FieldType {
    TEXT
    NUMBER
    DATE
    SELECT
}

enum QuizType {
  OPEN_LOOP
  CLOSED_LOOP
}

enum QuizStatus {
  COMPLETED
  PENDING_REVIEW
}
